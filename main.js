(()=>{"use strict";class e{list(){}get(){}create(){}update(){}delete(){}}const s=async e=>await fetch("https://chat-backend-6287.onrender.com/new-user",e);class t extends e{async registerUser(e){try{const t=await s({method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return await t.json()}catch(e){return void console.log(e)}}}class n{constructor(e){this.container=e,this.user=null,this.users=[],this.api=new t,this.websocket=null,this.bindToDOM=this.bindToDOM.bind(this),this.registerEvents=this.registerEvents.bind(this),this.onEnterChatHandler=this.onEnterChatHandler.bind(this),this.sendMessage=this.sendMessage.bind(this),this.sendExitMessage=this.sendExitMessage.bind(this)}static get markupChat(){return'\n      <div class="container">\n        <div class="chat__connect">\n          <div class="chat__userlist"></div>\n        </div>\n        <div class="chat__container">\n          <div class="chat__area">\n            <div class="chat__messages-container"></div>\n            <div class="chat__messages-input">\n              <form class="form form__group">\n                <input name="message" class="form form__input" type="text">\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    '}static markupUser(e,s){return`\n      <div id="${e}" class="chat__user">\n        <div class="chat-user-avatar"></div>\n        <div class="chat-user-name">${s}</div>\n      </div>\n    `}static markupMessage(e,s){return`\n      <div class="message__container">\n        <span class="message__container-interlocutor">${e}</span>\n        <span class="message__header">${s}</span>\n        <div class="popover-arrow-left"></div>\n        <div class="popover-arrow-right"></div>\n      </div>\n    `}init(){document.querySelector(".widget__authorization").addEventListener("submit",this.bindToDOM)}async bindToDOM(e){e.preventDefault();const s=e.target.name.value.trim();if(!s)return;const t=await this.api.registerUser({name:s});if("ok"===t.status&&(document.querySelector(".widget__authorization").style.display="none",this.container.insertAdjacentHTML("beforeEnd",n.markupChat),this.user=t.user,this.users.push(t.user)),"error"===t.status){const e=this.container.querySelector(".widget__input-container"),s=this.container.querySelector(".widget__input-name");if(document.querySelector(".widget__hint"))return;return e.insertAdjacentHTML("beforeEnd",'<span class="widget__hint">Этот ник уже занят!</span>'),void s.addEventListener("focus",(()=>{const e=document.querySelector(".widget__hint");e&&e.remove()}))}this.onEnterChatHandler(),this.websocket=new WebSocket("https://chat-backend-6287.onrender.com/"),this.subscribeOnEvents(),document.querySelector(".form").addEventListener("submit",this.sendMessage)}async registerEvents(e){const s=await JSON.parse(e.data);"send"!==s.type?(this.users=s,this.onEnterChatHandler()):this.renderMessage(s.name,s.msg)}subscribeOnEvents(){this.websocket.addEventListener("message",this.registerEvents),this.websocket.addEventListener("close",this.registerEvents),this.websocket.addEventListener("error",(()=>{console.log("error connect")})),window.addEventListener("beforeunload",this.sendExitMessage)}onEnterChatHandler(){const e=document.querySelector(".chat__userlist");e&&(e.innerHTML="",this.users.forEach((s=>{e.insertAdjacentHTML("beforeEnd",n.markupUser(s.id,s.name))})),document.getElementById(this.user.id).classList.add("chat-user-name__yourself"))}sendMessage(e){e.preventDefault();const s=e.target.message,t=s.value.trim();if(!t)return;const n={type:"send",name:this.user.name,msg:t};this.websocket.send(JSON.stringify(n)),s.value=""}renderMessage(e,s){const t=(new Date).toLocaleDateString(),i=e+", "+((new Date).toLocaleTimeString().slice(0,5)+" "+t),r=document.querySelector(".chat__messages-container");r.insertAdjacentHTML("beforeEnd",n.markupMessage(i,s));const a=r.lastElementChild;e===this.user.name&&a.classList.add("message__container-yourself"),r.scrollTop=r.scrollHeight}sendExitMessage(){if(!this.user)return;const e={type:"exit",user:{name:this.user.name}};this.websocket.send(JSON.stringify(e))}}const i=document.getElementById("root");new n(i).init()})();